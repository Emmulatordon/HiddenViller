@page "/hotel-room/create"
@page "/hotel-room/edit/{Id:int}"
@using Models;
@using Business.Repository.IRepository;
@inject IHotelRoomRepository HotelRoomRepository
@inject NavigationManager NavigationManager


<div class="row mt-2 mb-5">
    <h3 class="card-title text-info mb-3 ml-3">Create Hotel Room</h3>
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <EditForm Model="@HotelRoomModel" OnValidSubmit="HandleHotelRoomUpsert">
                    <DataAnnotationsValidator/>
                    <div class="form-group">
                        <label>Name</label>
                        <InputText @bind-Value="HotelRoomModel.Name" class="form-control" />
                        <ValidationMessage For="@(()=>HotelRoomModel.Name)" />
                    </div>
                    <div class="form-group">
                        <label>Occupancy</label>
                        <InputNumber @bind-Value="HotelRoomModel.Occupancy" class="form-control" />
                        <ValidationMessage For="@(()=>HotelRoomModel.Occupancy)" />
                    </div>
                    <div class="form-group">
                        <label>Rate</label>
                        <InputNumber @bind-Value="HotelRoomModel.RegularRate" class="form-control" />
                        <ValidationMessage For="@(()=>HotelRoomModel.RegularRate)" />
                    </div>
                    <div class="form-group">
                        <label>Sq ft.</label>
                        <InputText @bind-Value="HotelRoomModel.SqFt" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label>Details</label>
                        <InputTextArea @bind-Value="HotelRoomModel.Details" class="form-control" />
                    </div>
                    <div class="form-group">
                        <button class="btn btn-primary">@Title</button>
                        <NavLink href="Hotel-room" class="btn btn-secondary">Back to Index</NavLink>
                    </div>
                </EditForm> 
            </div>

        </div>
    </div>  
</div>

@code {
    [Parameter]
    public int? Id { get; set; }
    private HotelRoomDTO HotelRoomModel { get; set; } = new HotelRoomDTO();
    private string Title { get; set; } = "Create";
    protected async override Task OnInitializedAsync()
    {
        if (Id!=null)
        {
            Title = "Update";
            HotelRoomModel = await HotelRoomRepository.GetHotelRoom(Id.Value);
        }
        else
        {
            Title = "Create";
            HotelRoomModel = new HotelRoomDTO();
        }
    }
    private async Task HandleHotelRoomUpsert()
    {
        try
        {
            var roomDetailsByName = await HotelRoomRepository.IsRoomUnique(HotelRoomModel.Name, HotelRoomModel.Id);
            if (roomDetailsByName != null)
            {
                //there is duplicate room show error
                await JSRuntime.ToastrError("A room with that name already Exists", "Duplicate Room");
                return;
            }
            if (HotelRoomModel.Id != 0 && Title == "Update")
            {
                var updateResult = HotelRoomRepository.UpdateHotelRoom(HotelRoomModel.Id, HotelRoomModel);
                await JSRuntime.ToastrSuccess("The Room was updated Successfully", "Updated");

            }
            else
            {
                var createdResult = HotelRoomRepository.CreateHotelRoom(HotelRoomModel);
                await JSRuntime.ToastrSuccess("The Room was created Successfully", "Created");
            }
            NavigationManager.NavigateTo("/hotel-room",true);

        }
        catch (Exception)
        {
            
            throw;
        }
    }
}
