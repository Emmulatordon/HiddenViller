@page "/hotel-room/create"
@page "/hotel-room/edit/{Id:int}"
@using Models;
@using HiddenViller_Server.Service.IService
@using Business.Repository.IRepository;
@inject IHotelRoomRepository HotelRoomRepository
@inject IHotelImagesRepository HotelImagesRepository
@inject NavigationManager NavigationManager
@inject IFileUpload FileUpload


<div class="row mt-2 mb-5">
    <h3 class="card-title text-info mb-3 ml-3">Create Hotel Room</h3>
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <EditForm Model="@HotelRoomModel" OnValidSubmit="HandleHotelRoomUpsert">
                    <DataAnnotationsValidator/>
                    <div class="form-group">
                        <label>Name</label>
                        <InputText @bind-Value="HotelRoomModel.Name" class="form-control" />
                        <ValidationMessage For="@(()=>HotelRoomModel.Name)" />
                    </div>
                    <div class="form-group">
                        <label>Occupancy</label>
                        <InputNumber @bind-Value="HotelRoomModel.Occupancy" class="form-control" />
                        <ValidationMessage For="@(()=>HotelRoomModel.Occupancy)" />
                    </div>
                    <div class="form-group">
                        <label>Rate</label>
                        <InputNumber @bind-Value="HotelRoomModel.RegularRate" class="form-control" />
                        <ValidationMessage For="@(()=>HotelRoomModel.RegularRate)" />
                    </div>
                    <div class="form-group">
                        <label>Sq ft.</label>
                        <InputText @bind-Value="HotelRoomModel.SqFt" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label>Details</label>
                        <InputTextArea @bind-Value="HotelRoomModel.Details" class="form-control" />
                    </div>
                    <div class="form-group">
                        <InputFile OnChange="HandleImageUpload" multiple></InputFile>
                    </div>
                    <div class="row">   
                        @if (IsImageUploadProcessStarted)
                        {
                            <div class="col-md-12">
                                <span><i class="fa fa-spin fa-spinner"></i> Please wait.. Images are uploading...</span>
                            </div>
                        }
                        @if (HotelRoomModel.ImageUrls != null && HotelRoomModel.ImageUrls.Count > 0)
                        {
                            int serial = 1;
                            foreach (var roomImage in HotelRoomModel.ImageUrls)
                            {
                                <div class="col-md-2 mt-3">
                                    <div class="room-image" style="background: url('@roomImage') 50% 50%; ">
                                        <span class="room-image-title">@serial</span>
                                    </div>

                                    <button type="button" @onclick="()=>DeletePhoto(roomImage)" class="btn btn-outline-danger btn-block mt-4">
                                        Delete
                                    </button>
                                </div>
                                serial++;
                            }
                        }
                    </div>
                    <div class="form-group">
                        <button class="btn btn-primary">@Title</button>
                        <NavLink href="Hotel-room" class="btn btn-secondary">Back to Index</NavLink>
                    </div>
                </EditForm> 
            </div>

        </div>
    </div>  
</div>

@code {
    [Parameter]
    public int? Id { get; set; }
    private HotelRoomDTO HotelRoomModel { get; set; } = new HotelRoomDTO();    
    private List<string> DeletedImageNames { get; set; } = new List<string>();
    private HotelRoomImageDTO RoomImage { get; set; }
    private bool IsImageUploadProcessStarted { get; set; } = false;
    private string Title { get; set; } = "Create";
    protected async override Task OnInitializedAsync()
    {
        if (Id!=null)
        {
            Title = "Update";
            HotelRoomModel = await HotelRoomRepository.GetHotelRoom(Id.Value);
            if (HotelRoomModel?.HotelRoomImages != null)
            {
                HotelRoomModel.ImageUrls = HotelRoomModel.HotelRoomImages.Select(u => u.RoomImageUrl).ToList();
            }
        }
        else
        {
            Title = "Create";
            HotelRoomModel = new HotelRoomDTO();
            HotelRoomModel.ImageUrls = new List<string>();
        }
    }
    private async Task HandleHotelRoomUpsert()
    {
        try
        {
            var roomDetailsByName = await HotelRoomRepository.IsRoomUnique(HotelRoomModel.Name, HotelRoomModel.Id);
            if (roomDetailsByName != null)
            {
                //there is duplicate room show error
                await JSRuntime.ToastrError("A room with that name already Exists", "Duplicate Room");
                return;
            }
            if (HotelRoomModel.Id != 0 && Title == "Update")
            {
                
                //update
                var updateRoomResult = await HotelRoomRepository.UpdateHotelRoom(HotelRoomModel.Id, HotelRoomModel);
                if ((HotelRoomModel.ImageUrls != null && HotelRoomModel.ImageUrls.Any()) || (DeletedImageNames != null && DeletedImageNames.Any()))
                {
                    if (DeletedImageNames != null && DeletedImageNames.Any())
                    {
                        foreach (var deletedImageName in DeletedImageNames)
                        {
                            var imageName = deletedImageName.Replace($"{NavigationManager.BaseUri}RoomImages/", "");

                            var result = FileUpload.DeleteFile(imageName);
                            await HotelImagesRepository.DeleteHotelImageByImageUrl(deletedImageName);
                        }
                    }

                    await AddHotelRoomImage(updateRoomResult);
                }
                await JSRuntime.ToastrSuccess("Hotel room updated successfully.","success");

            }
            else
            {
                var createdResult = await HotelRoomRepository.CreateHotelRoom(HotelRoomModel);
                await AddHotelRoomImage(createdResult);
                await JSRuntime.ToastrSuccess("The Room was created Successfully", "Created");
            }
            NavigationManager.NavigateTo("/hotel-room",true);

        }
        catch (Exception)
        {


        }
    }
    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        IsImageUploadProcessStarted = true;
        try
        {
            var images = new List<string>();
            if (e.GetMultipleFiles().Count > 0)
            {
                foreach (var file in e.GetMultipleFiles())
                {
                    System.IO.FileInfo fileInfo = new System.IO.FileInfo(file.Name);
                    if (fileInfo.Extension.ToLower() == ".jpg" ||
                        fileInfo.Extension.ToLower() == ".png" ||
                        fileInfo.Extension.ToLower() == ".jpeg")
                    {
                        var uploadedImagePath = await FileUpload.UploadFile(file);
                        images.Add(uploadedImagePath);
                    }
                    else
                    {
                        await JSRuntime.ToastrError("Please select .jpg/.jpeg/.png file only","failed");
                        return;
                    }
                }

                if (images.Any())
                {
                    if (HotelRoomModel.ImageUrls != null && HotelRoomModel.ImageUrls.Any())
                    {
                        HotelRoomModel.ImageUrls.AddRange(images);
                    }
                    else
                    {
                        HotelRoomModel.ImageUrls = new List<string>();
                        HotelRoomModel.ImageUrls.AddRange(images);
                    }
                }
                else
                {
                    await JSRuntime.ToastrError("Image uploading failed","failed");
                    return;
                }
            }
            IsImageUploadProcessStarted = false;

        }
        catch (Exception ex)
        {
            await JSRuntime.ToastrError(ex.Message,"failed");
        }



    }
    private async Task AddHotelRoomImage(HotelRoomDTO room)
    {
        foreach (var imageUrl in HotelRoomModel.ImageUrls)
        {
            if (HotelRoomModel.HotelRoomImages == null || HotelRoomModel.HotelRoomImages.Where(x => x.RoomImageUrl == imageUrl).Count() == 0)
            {

                RoomImage = new HotelRoomImageDTO()
                    {
                        RoomId = room.Id,
                        RoomImageUrl = imageUrl
                    };
                await HotelImagesRepository.CreateHotelRoomImage(RoomImage);
            }
        }
    }
    public async Task DeletePhoto(string imageUrl)
    {
        try
        {
            var imageIndex = HotelRoomModel.ImageUrls.FindIndex(x => x == imageUrl);
            var imageName = imageUrl.Replace($"{NavigationManager.BaseUri}RoomImages/", "");
            if (HotelRoomModel.Id == 0 && Title == "Create")
            {
                var result = FileUpload.DeleteFile(imageName);
            }
            else
            {
                //update
                DeletedImageNames ??= new List<string>();
                DeletedImageNames.Add(imageUrl);
            }
            HotelRoomModel.ImageUrls.RemoveAt(imageIndex);
        }
        catch (Exception ex)
        {
            await JSRuntime.ToastrError(ex.Message,"error");
        }

    }
}
